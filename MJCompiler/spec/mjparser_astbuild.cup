package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, COMMA, PRINT, RETURN, PLUS, EQUAL, VOID;
terminal DOUBLEDOT, EXTENDS, NEW, DOT, DIV, MINUS, RSWBREACE, MINUSMINUS, SWITCH, PLUSPLUS, CONST, AND;
terminal LESS, READ, GREATER, DIFFERENT, WHILE, DO, CLASS, ELESS, CONTINUE, LSQBRACE, OR;
terminal RSQBRACE, EGREATER, ENUM, MOD, MUL, BREAK, CASE, QUESTION, EQUALSTO, TWODOUBLEDOT, NAMESPACE;
terminal String BOOL;
terminal Integer NUMBER ;
terminal String IDENT ;
terminal String CHAR;
terminal IF, ELSE;
nonterminal Program Program;
nonterminal ConstVarDeclList ConstVarDeclList;
nonterminal ConstVarDecl ConstVarDecl;
nonterminal ConstDeclList ConstDeclList;
nonterminal VarDeclList VarDeclList;
nonterminal ConstDeclaration ConstDeclaration;
nonterminal ConstValue ConstValue;
nonterminal VarDeclaration VarDeclaration;
nonterminal OptionalSquareBrackets OptionalSquareBrackets;
nonterminal Type Type;
nonterminal ConstType ConstType;
nonterminal VarType VarType;
nonterminal NamespaceList NamespaceList;
nonterminal Namespace Namespace;
nonterminal MethodDeclList MethodDeclList;
nonterminal MethodDecl MethodDecl;
nonterminal ConstDecl ConstDecl;
nonterminal VarDecl VarDecl;
nonterminal MethodType MethodType;
nonterminal MethodTypeName MethodTypeName;
nonterminal LocalVarDeclList LocalVarDeclList;
nonterminal FormPars FormPars;
nonterminal FormPar FormPar;

Program ::= (Program) PROG IDENT:I1 NamespaceList:N2 ConstVarDeclList:C3 LBRACE MethodDeclList:M4 RBRACE {: RESULT=new Program(I1, N2, C3, M4); RESULT.setLine(I1left); :};

NamespaceList ::= (NsList) NamespaceList:N1 Namespace:N2 {: RESULT=new NsList(N1, N2); RESULT.setLine(N1left); :}
				|
				(NoNsList) {: RESULT=new NoNsList(); :} /*epsilon*/
				;

Namespace ::= (Namespace) NAMESPACE IDENT:I1 LBRACE ConstVarDeclList:C2 LBRACE RBRACE MethodDeclList:M3 RBRACE {: RESULT=new Namespace(I1, C2, M3); RESULT.setLine(I1left); :};

MethodDeclList ::= (MDList) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MDList(M1, M2); RESULT.setLine(M1left); :}
				|
				(NoMDList) {: RESULT=new NoMDList(); :} /*epsilon*/
				;
				
MethodDecl ::= (MethodDeclaration) MethodTypeName:M1 LPAREN FormPars:F2 RPAREN LocalVarDeclList:L3 LBRACE RBRACE {: RESULT=new MethodDeclaration(M1, F2, L3); RESULT.setLine(M1left); :};

MethodTypeName ::= (MTypeName) MethodType:M1 IDENT:I2 {: RESULT=new MTypeName(M1, I2); RESULT.setLine(M1left); :};

MethodType ::= (MType) Type:T1 {: RESULT=new MType(T1); RESULT.setLine(T1left); :}
			|
			(MVoid) VOID {: RESULT=new MVoid(); :}
			;
			
FormPars ::= (FPars) FormPars:F1 COMMA FormPar:F2 {: RESULT=new FPars(F1, F2); RESULT.setLine(F1left); :}
			|
			(FPar) FormPar:F1 {: RESULT=new FPar(F1); RESULT.setLine(F1left); :}
			;

FormPar ::= (FormPar) Type:T1 IDENT:I2 OptionalSquareBrackets:O3 {: RESULT=new FormPar(T1, I2, O3); RESULT.setLine(T1left); :};

LocalVarDeclList ::= (LVarDeclList) LocalVarDeclList:L1 VarDecl:V2 {: RESULT=new LVarDeclList(L1, V2); RESULT.setLine(L1left); :}
					|
					(NoLVarDeclList) {: RESULT=new NoLVarDeclList(); :} /*epsilon*/
					;

ConstVarDeclList ::= (ConstVarDeclarations) ConstVarDeclList:C1 ConstVarDecl:C2 {: RESULT=new ConstVarDeclarations(C1, C2); RESULT.setLine(C1left); :}
				| {: RESULT=new ConstVarDeclListDerived1(); :}
				/*epsilon*/
				;

ConstVarDecl ::= (CDecl) ConstDecl:C1 {: RESULT=new CDecl(C1); RESULT.setLine(C1left); :}
				|
				(VDecl) VarDecl:V1 {: RESULT=new VDecl(V1); RESULT.setLine(V1left); :}
				;
				
ConstDecl ::= (ConstDecl) CONST Type:T1 ConstDeclList:C2 SEMI {: RESULT=new ConstDecl(T1, C2); RESULT.setLine(T1left); :};

VarDecl ::= (VarDecl) Type:T1 VarDeclList:V2 SEMI {: RESULT=new VarDecl(T1, V2); RESULT.setLine(T1left); :};

ConstDeclList ::= (CommaConstDeclList) ConstDeclList:C1 COMMA ConstDeclaration:C2 {: RESULT=new CommaConstDeclList(C1, C2); RESULT.setLine(C1left); :}
				|
				(NoCommaConstDeclList) ConstDeclaration:C1 {: RESULT=new NoCommaConstDeclList(C1); RESULT.setLine(C1left); :}
				;
				
ConstDeclaration ::= (ConstDeclaration) IDENT:I1 EQUAL ConstValue:C2 {: RESULT=new ConstDeclaration(I1, C2); RESULT.setLine(I1left); :};

ConstValue ::= (NumConst) NUMBER:N1 {: RESULT=new NumConst(N1); RESULT.setLine(N1left); :}
			|
			(CharConst) CHAR:C1 {: RESULT=new CharConst(C1); RESULT.setLine(C1left); :}
			|
			(BoolConst) BOOL:B1 {: RESULT=new BoolConst(B1); RESULT.setLine(B1left); :}
			;

VarDeclList ::= (CommaVarDeclList) VarDeclList:V1 COMMA VarDeclaration:V2 {: RESULT=new CommaVarDeclList(V1, V2); RESULT.setLine(V1left); :}
			|
			(NoCommaVarDeclList) VarDeclaration:V1 {: RESULT=new NoCommaVarDeclList(V1); RESULT.setLine(V1left); :}
			;
			
VarDeclaration ::= (VarDeclaration) IDENT:I1 OptionalSquareBrackets:O2 {: RESULT=new VarDeclaration(I1, O2); RESULT.setLine(I1left); :};

OptionalSquareBrackets ::= (OSBrackets) LSQBRACE RSQBRACE {: RESULT=new OSBrackets(); :}
						|
						(NoOSBrackets) {: RESULT=new NoOSBrackets(); :} /*epsilon*/
						;

Type ::= (Type) IDENT:I1 {: RESULT=new Type(I1); RESULT.setLine(I1left); :};