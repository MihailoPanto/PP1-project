package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

// - TERMINALI -

terminal PROG, CONST, IF, NEW, PRINT, READ, RETURN, VOID, NAMESPACE;
terminal PLUS, MINUS, MUL, DIV, MOD, EQUAL_EQUAL, DIFFERENT, GREATER;
terminal GREATER_EQUAL, LESS, LESS_EQUAL, AND, OR, EQUAL, PLUS_PLUS;
terminal MINUS_MINUS, SEMI, DOUBLE_DOT, COMMA, DOT, LPAREN, RPAREN;
terminal LSBRACE, RSBRACE, LBRACE, RBRACE, TWO_DOUBLE_DOT, ELSE;
terminal String BOOL;
terminal Integer NUMBER ;
terminal String IDENT ;
terminal String CHAR;

// - NETERMINALI -

// program
// consts & var
nonterminal ConstVarDeclList, ConstVarDecl, ConstDecl, ConstDeclList, ConstDeclaration, VarDecl, VarDeclList, VarDeclaration, OptionalSquareBrackets;	
// namespace
nonterminal NamespaceList;
// method
nonterminal MethodDeclList, MethodDecl, MethodTypeName, MethodType, FormParsOpt, FormPars, FormPar, LocalVarDeclList;
// statement
nonterminal StatementList, Statement, OptPrint, DesignatorStatement, DesignatorStatementPart, Expr, ExprPart, MinusOptional, Term, Factor;
// designator
nonterminal Designator, DesignatorOptPart, NamespaceAccess;
// operators
nonterminal MulOp, AddOp, AssignOp, RelOp;
// conditions
nonterminal ConditionList, CondTermList, CondFact;

// symboltable obj
nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, Namespace, NamespaceName;
// symboltable obj
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, ConstValue;


// -------------------- PROGRAM --------------------

Program ::= (Program) PROG ProgName:p NamespaceList ConstVarDeclList LBRACE MethodDeclList RBRACE;

ProgName ::= (ProgName) IDENT:progName;

// -------------------- NAMESPACE --------------------

NamespaceList ::= (NameSpacesList) NamespaceList Namespace
		|
		(NoNameSpacesList) /*epsilon*/
		;

Namespace ::= (Namespace) NAMESPACE NamespaceName:n LBRACE ConstVarDeclList LBRACE RBRACE MethodDeclList RBRACE;

NamespaceName ::= (NamespaceName) IDENT:namespaceName;

// -------------------- METHOD --------------------

MethodDeclList ::= (MethodDeclarationList) MethodDeclList MethodDecl
		|
		(NoMethodDeclarationList) /*epsilon*/
		;
				
MethodDecl ::= (MethodDeclaration) MethodTypeName LPAREN FormParsOpt RPAREN LocalVarDeclList LBRACE StatementList RBRACE;

MethodTypeName ::= (MTypeName) MethodType IDENT;

MethodType ::= (MethType) Type
		|
		(NoMethType) VOID
		;
			
FormParsOpt ::= (FormParsOptional) FormPars
		|
		(NoFormParsOptional)/*epsilon*/
		;
			
FormPars ::= (FPars) FormPars COMMA FormPar
		|
		(FPar) FormPar
		;

FormPar ::= (FormPar) Type IDENT OptionalSquareBrackets;

LocalVarDeclList ::= (LocalVarDeclarationList) LocalVarDeclList VarDecl
		|
		(NoLocalVarDeclarationList) /*epsilon*/
		;

// -------------------- CONST VAR --------------------

ConstVarDeclList ::= (ConstVarDeclarationList) ConstVarDeclList ConstVarDecl
		|
		(NoConstVarDeclarationList) /*epsilon*/
		;

ConstVarDecl ::= (ConstCVDeclaration) ConstDecl
		|
		(VarCVDeclaration) VarDecl
		;
				
				
// -------------------- CONST --------------------
				
ConstDecl ::= (ConstDecl) CONST Type ConstDeclList SEMI;

		
ConstDeclList ::= (CommaConstDeclList) ConstDeclList COMMA ConstDeclaration
		|
		(SingleConstDecl) ConstDeclaration
		;
				
ConstDeclaration ::= (ConstDeclaration) IDENT:constName EQUAL ConstValue:constValue;

ConstValue ::= (NumberConst) NUMBER
		|
		(CharConst) CHAR
		|
		(BoolConst) BOOL
		;

// -------------------- VAR --------------------

VarDecl ::= (TypeSemiVarDecl) Type VarDeclList SEMI
		|
		(ErrorVarDecl) error SEMI:l
		{: parser.report_error("Oporavak izvrsen do ; u liniji " + lleft, null); :}
		;

VarDeclList ::= (CommaVarDeclList) VarDeclList COMMA VarDeclaration
		|
		(NoCommaVarDeclList) VarDeclaration
		|
		(ErrorCommaVList) error:l 
		{: parser.report_error("Oporavak izvrsen do , u liniji " + lleft, null); :}
		;
	
VarDeclaration ::= (VArrayDeclaration) IDENT:varName LSBRACE RSBRACE
		|
		(VDeclaration) IDENT:varName
		;
						
Type ::= (Type) IDENT:typeName;

// -------------------- STATEMENT --------------------

StatementList ::= (StmtList) StatementList Statement
		|
		(NoStmtList) /*epsilon*/
		;

Statement ::= (StmtDesignatorStatement) DesignatorStatement SEMI
		|
		(StmtError) error SEMI:l 
		{: parser.report_error("Oporavak izvrsen do , u liniji " + lleft, null); :}
		|
		(StmtRead) READ LPAREN Designator RPAREN SEMI
		|
		(StmtPrint) PRINT LPAREN Expr OptPrint RPAREN SEMI
		;

OptPrint ::= (CommaOptPrint) COMMA NUMBER
		|
		(NoOptPrint) /*epsilon*/
		;

DesignatorStatement ::= (DesignatorStmt) Designator DesignatorStatementPart;

DesignatorStatementPart ::= (AssignExpr) AssignOp Expr
		|
		(PlusPlus) PLUS_PLUS
		|
		(MinusMinus) MINUS_MINUS
		;

Expr ::= (Expr) MinusOptional ExprPart;

ExprPart ::= (AddopExprPart) ExprPart AddOp Term
		|
		(NoAddOpExprPart) Term
		;

MinusOptional ::= (MinusOpt) MINUS
		|
		(NoMinusOpt) /*epsilon*/
		;

Term ::= (TermMulOp) Term MulOp Factor
		|
		(TermFactor) Factor
		; 

Factor ::= (FactorConstValue) ConstValue
		|
		(FactorNew) NEW Type LSBRACE Expr RSBRACE
		|
		(FactorExpr) LPAREN Expr RPAREN
		|
		(FactorDesignator) Designator
		;

Designator ::= (Designator) NamespaceAccess DesignatorOptPart;

DesignatorOptPart ::= (DesignatorExpr) LSBRACE Expr RSBRACE
		|
		(NoDesignatorExpr) /*epsilon*/
		;

NamespaceAccess ::= (NsAccess) IDENT TWO_DOUBLE_DOT IDENT
		|
		(NoNsAccess) IDENT
		;
	
// -------------------- CONDITIONS --------------------
			
ConditionList ::= (CondListOr) ConditionList OR CondTermList
		|
		(CondListNoOr)CondTermList
		;
		
CondTermList ::= (CondTermListAnd) CondTermList AND CondFact
		|
		(CondTermListNoAnd) CondFact
		;
		
CondFact ::= (CondFactRelOp) Expr RelOp Expr
		|
		(CondFactNoRelOp) Expr
		;			

// -------------------- OPERATORS --------------------

RelOp ::= (RelOp_EqualEqual) EQUAL_EQUAL 
		|	
		(RelOp_Different) DIFFERENT
		|	
		(RelOp_Greater) GREATER
		|	
		(RelOp_Greater_Equal) GREATER_EQUAL
		|	
		(RelOp_Less) LESS
		|	
		(RelOp_Less_Equal) LESS_EQUAL
		;

AssignOp ::= (AssignOpEqual) EQUAL;

AddOp ::= (AddOpPlus) PLUS
		|
		(AddOpMinus) MINUS
		;
		
MulOp ::= (Mul) MUL
		|
		(Div) DIV
		|
		(Mod) MOD
		;