package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, COMMA, PRINT, RETURN, PLUS, EQUAL, VOID;
terminal DOUBLEDOT, EXTENDS, NEW, DOT, DIV, MINUS, RSWBREACE, MINUSMINUS, SWITCH, PLUSPLUS, CONST, AND;
terminal LESS, READ, GREATER, DIFFERENT, WHILE, DO, CLASS, ELESS, CONTINUE, LSQBRACE, OR;
terminal RSQBRACE, EGREATER, ENUM, MOD, MUL, BREAK, CASE, QUESTION, EQUALSTO, TWODOUBLEDOT, NAMESPACE;
terminal String BOOL;
terminal Integer NUMBER ;
terminal String IDENT ;
terminal String CHAR;
terminal IF, ELSE;
nonterminal Program, ConstVarDeclList, ConstVarDecl, ConstDeclList, VarDeclList, ConstDeclaration, ConstValue, VarDeclaration, OptionalSquareBrackets, Type, ConstType, VarType;

Program ::= (Program) PROG IDENT ConstVarDeclList LBRACE RBRACE;

ConstVarDeclList ::= (ConstVarDeclarations) ConstVarDeclList ConstVarDecl
				|
				/*epsilon*/
				;

ConstVarDecl ::= (ConstDecl) CONST Type ConstDeclList SEMI
				|
				(VarDecl) Type VarDeclList SEMI
				;

ConstDeclList ::= (CommaConstDeclList) ConstDeclList COMMA ConstDeclaration
				|
				(NoCommaConstDeclList) ConstDeclaration
				;
				
ConstDeclaration ::= (ConstDeclaration) IDENT EQUAL ConstValue;

ConstValue ::= (NumConst) NUMBER
			|
			(CharConst) CHAR
			|
			(BoolConst) BOOL
			;

VarDeclList ::= (CommaVarDeclList) VarDeclList COMMA VarDeclaration
			|
			(NoCommaVarDeclList) VarDeclaration
			;
			
VarDeclaration ::= (VarDeclaration) IDENT OptionalSquareBrackets;

OptionalSquareBrackets ::= (OSBrackets) LSQBRACE RSQBRACE
						|
						(NoOSBrackets) /*epsilon*/
						;

Type ::= (Type) IDENT;