package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, COMMA, PRINT, RETURN, PLUS, EQUAL, VOID;
terminal DOUBLEDOT, EXTENDS, NEW, DOT, DIV, MINUS, RSWBREACE, MINUSMINUS, SWITCH, PLUSPLUS, CONST, AND;
terminal LESS, READ, GREATER, DIFFERENT, WHILE, DO, CLASS, ELESS, CONTINUE, LSQBRACE, OR;
terminal RSQBRACE, EGREATER, ENUM, MOD, MUL, BREAK, CASE, QUESTION, EQUALSTO, TWODOUBLEDOT, NAMESPACE;
terminal String BOOL;
terminal Integer NUMBER ;
terminal String IDENT ;
terminal String CHAR;
terminal IF, ELSE;
nonterminal Program, ConstVarDeclList, ConstVarDecl, ConstDeclList, VarDeclList, ConstDeclaration, ConstValue, VarDeclaration, OptionalSquareBrackets, Type, ConstType, VarType;
nonterminal NamespaceList, Namespace, MethodDeclList, MethodDecl, ConstDecl, VarDecl, MethodType;
nonterminal MethodTypeName, LocalVarDeclList, FormPars, FormPar;
nonterminal Mulop, Addop, AssignOp, NamespaceAccess, Designator, DesignatorOptPart, DesignatorOptPartList;
nonterminal Expr, Factor, Term, MinusOptional, ExprPart, DesignatorStatement, DesignatorStatementPart, Statement;
nonterminal StatementList, DesignatorIdent, OptPrint, FormParsOpt;

Program ::= (Program) PROG IDENT NamespaceList ConstVarDeclList LBRACE MethodDeclList RBRACE;

NamespaceList ::= (NsList) NamespaceList Namespace
				|
				(NoNsList) /*epsilon*/
				;

Namespace ::= (Namespace) NAMESPACE IDENT LBRACE ConstVarDeclList LBRACE RBRACE MethodDeclList RBRACE;

MethodDeclList ::= (MDList) MethodDeclList MethodDecl
				|
				(NoMDList) /*epsilon*/
				;
				
MethodDecl ::= (MethodDeclaration) MethodTypeName LPAREN FormParsOpt RPAREN LocalVarDeclList LBRACE StatementList RBRACE;

MethodTypeName ::= (MTypeName) MethodType IDENT;

MethodType ::= (MType) Type
			|
			(MVoid) VOID
			;
			
FormParsOpt ::= (FParsOpt) FormPars
			|
			(NoFParsOpt)/*epsilon*/
			;
			
FormPars ::= (FPars) FormPars COMMA FormPar
			|
			(FPar) FormPar
			;

FormPar ::= (FormPar) Type IDENT OptionalSquareBrackets;

LocalVarDeclList ::= (LVarDeclList) LocalVarDeclList VarDecl
					|
					(NoLVarDeclList) /*epsilon*/
					;

ConstVarDeclList ::= (ConstVarDeclarations) ConstVarDeclList ConstVarDecl
				|
				/*epsilon*/
				;

ConstVarDecl ::= (CDecl) ConstDecl
				|
				(VDecl) VarDecl
				|
				error SEMI:l {: parser.report_error("Sintaksa greska deklaracije globalne promenljive na liniji " + lleft, null); :}
				;
				
ConstDecl ::= (ConstDecl) CONST Type ConstDeclList SEMI;

VarDecl ::= (VarDecl) Type VarDeclList SEMI;

ConstDeclList ::= (CommaConstDeclList) ConstDeclList COMMA ConstDeclaration
				|
				(NoCommaConstDeclList) ConstDeclaration
				;
				
ConstDeclaration ::= (ConstDeclaration) IDENT EQUAL ConstValue;

ConstValue ::= (NumConst) NUMBER
			|
			(CharConst) CHAR
			|
			(BoolConst) BOOL
			;

VarDeclList ::= (CommaVarDeclList) VarDeclList COMMA VarDeclaration
			|
			(NoCommaVarDeclList) VarDeclaration
			;
			
VarDeclaration ::= (VarDeclaration) IDENT OptionalSquareBrackets;

OptionalSquareBrackets ::= (OSBrackets) LSQBRACE RSQBRACE
						|
						(NoOSBrackets) /*epsilon*/
						;
						
Type ::= (Type) IDENT;

StatementList ::= (StatList) StatementList Statement
				|
				(NoStatList) /*epsilon*/
				;

Statement ::= (StatementDesigStat) DesignatorStatement SEMI
			|
		 	error SEMI:l {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :}
			|
			(StatementRead) READ LPAREN Designator RPAREN SEMI
			|
			(StatementPrint) PRINT LPAREN Expr OptPrint RPAREN SEMI
			;

OptPrint ::= (CommaOptPrint) COMMA NUMBER
			|
			(NoOptPrint) /*epsilon*/
			;

DesignatorStatement ::= (DesigStatement) Designator DesignatorStatementPart;

DesignatorStatementPart ::= (AssignExpr) AssignOp Expr
						|
						(PlusPlus) PLUSPLUS
						|
						(MinusMinus) MINUSMINUS
						;

Expr ::= (Exp) MinusOptional ExprPart;

ExprPart ::= (AddopExprPart) ExprPart Addop Term
			|
			(NoAddopExprPart) Term
			;

MinusOptional ::= (MinusOpt) MINUS
				|
				(NoMinusOpt) /*epsilon*/
				;

Term ::= (TermMulop) Term Mulop Factor
		|
		(TermFactor) Factor
		; 

Factor ::= (FactorConstValue) ConstValue
		|
		(FactorNew) NEW Type LSQBRACE Expr RSQBRACE
		|
		(FactorExpr) LPAREN Expr RPAREN
		|
		(FactorDesignator) Designator
		;

Designator ::= (Designator) NamespaceAccess DesignatorOptPart;

DesignatorOptPart ::= (DesignatorExpr) LSQBRACE Expr RSQBRACE
					|
					(NoDesignatorExpr) /*epsilon*/
					;

NamespaceAccess ::= (NsAccess) IDENT TWODOUBLEDOT IDENT
				|
				(NoNsAccess) IDENT
				;
				

AssignOp ::= (AssignOpEqual) EQUAL;

Addop ::= (AddopPlus) PLUS
		|
		(AddopMinus) MINUS
		;
		
Mulop ::= (Mul) MUL
		|
		(Div) DIV
		|
		(Mod) MOD
		;	
		
		