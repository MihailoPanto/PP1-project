package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;
	
	Logger log = Logger.getLogger(getClass());
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna GRESKA, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

// - TERMINALI -

terminal PROG, CONST, NEW, PRINT, READ, VOID, NAMESPACE;
terminal PLUS, MINUS, MUL, DIV, MOD;
terminal EQUAL, PLUS_PLUS;
terminal MINUS_MINUS, SEMI, COMMA, LPAREN, RPAREN;
terminal LSBRACE, RSBRACE, LBRACE, RBRACE, TWO_DOUBLE_DOT;
terminal String BOOL;
terminal Integer NUMBER ;
terminal String IDENT ;
terminal String CHAR;

// - NETERMINALI -

// program
// consts & var
nonterminal ConstVarDeclList, ConstVarDecl, ConstDecl, ConstDeclList, VarDecl, VarDeclList;	
// namespace
nonterminal NamespaceList;
// method
nonterminal MethodDeclList, LocalVarDeclList;
// statement
nonterminal StatementList, Statement;
// designator
// operators
nonterminal MulOp, AddOp, AssignOp;

// symboltable obj
nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, Namespace, NamespaceName, MethodDecl, MethodTypeName, Designator, DesignatorStatement;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ConstDeclaration, VarDeclaration;
// symboltable struct
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, ConstValue, Expr, Term, Factor;


// -------------------- PROGRAM --------------------

Program ::= (Program) PROG ProgName:p NamespaceList ConstVarDeclList LBRACE MethodDeclList RBRACE;

ProgName ::= (ProgName) IDENT:progName;

// -------------------- NAMESPACE --------------------

NamespaceList ::= (NameSpacesList) NamespaceList Namespace
		|
		(NoNameSpacesList) /*epsilon*/
		;

Namespace ::= (Namespace) NAMESPACE NamespaceName:n LBRACE ConstVarDeclList LBRACE RBRACE MethodDeclList RBRACE;

NamespaceName ::= (NamespaceName) IDENT:namespaceName;

// -------------------- METHOD --------------------

MethodDeclList ::= (MethodDeclarationList) MethodDeclList MethodDecl
		|
		(NoMethodDeclarationList) /*epsilon*/
		;
				
MethodDecl ::= (MethodDecl) MethodTypeName:methodTypeName LPAREN RPAREN LocalVarDeclList LBRACE StatementList RBRACE;

MethodTypeName ::= (MethodTypeNameType) Type:methodType IDENT:methodName
		|
		(MethodTypeNameVoid) VOID:methodType IDENT:methodName
		;

LocalVarDeclList ::= (LocalVarDeclarationList) LocalVarDeclList VarDecl
		|
		(NoLocalVarDeclarationList) /*epsilon*/
		;

// -------------------- CONST VAR --------------------

ConstVarDeclList ::= (ConstVarDeclarationList) ConstVarDeclList ConstVarDecl
		|
		(NoConstVarDeclarationList) /*epsilon*/
		;

ConstVarDecl ::= (ConstCVDeclaration) ConstDecl
		|
		(VarCVDeclaration) VarDecl
		;
				
				
// -------------------- CONST --------------------
				
ConstDecl ::= (TypeSemiConstDecl) CONST Type ConstDeclList SEMI;

		
ConstDeclList ::= (CommaConstDeclList) ConstDeclList COMMA ConstDeclaration
		|
		(OneConstDecl) ConstDeclaration
		;
				
ConstDeclaration ::= (ConstDeclaration) IDENT:name EQUAL ConstValue:value;

ConstValue ::= (BoolConst) BOOL
		|
		(CharConst) CHAR
		|
		(NumberConst) NUMBER
		;

// -------------------- VAR --------------------

VarDecl ::= (TypeSemiVarDecl) Type VarDeclList SEMI
		|
		(ErrorVarDecl) error SEMI:l
		{: parser.report_error("Oporavak izvrsen do ; u liniji " + lleft, null); :}
		;

VarDeclList ::= (CommaVarDeclList) VarDeclList COMMA VarDeclaration
		|
		(NoCommaVarDeclList) VarDeclaration
		|
		(ErrorCommaVList) error:l 
		{: parser.report_error("Oporavak izvrsen do , u liniji " + lleft, null); :}
		;
	
VarDeclaration ::= (VArrayDeclaration) IDENT:name LSBRACE RSBRACE
		|
		(VDeclaration) IDENT:name
		;
						
Type ::= (Type) IDENT:name;

// -------------------- STATEMENT --------------------

StatementList ::= (StmtList) StatementList Statement
		|
		(NoStmtList) /*epsilon*/
		;

Statement ::= (DesignatorStatementStmt) DesignatorStatement SEMI
		|
		(ErrorStmt) error SEMI:l 
		{: parser.report_error("Oporavak izvrsen do , u liniji " + lleft, null); :}
		|
		(ReadStmt) READ LPAREN Designator RPAREN SEMI
		|
		(PrintStmt) PRINT LPAREN Expr RPAREN SEMI
		|
		(PrintNumStmt) PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI
		;

DesignatorStatement ::= (DesignatorAssign) Designator AssignOp Expr
		|
		(DesignatorPP)Designator PLUS_PLUS
		|
		(DesignatorMM) Designator MINUS_MINUS
		;

Expr ::= (ExprMinus) MINUS Term
		|
		(ExprTerm) Term
		|
		(ExprAddop) Expr AddOp Term
		;

Term ::= (TermMulOp) Term MulOp Factor
		|
		(TermFactor) Factor
		; 

Factor ::= (FactorConstValueBool) BOOL
		|
		(FactorConstValueChar) CHAR
		|
		(FactorConstValueNum) NUMBER
		|
		(FactorNew) NEW Type LSBRACE Expr RSBRACE
		|
		(FactorParenExpr) LPAREN Expr RPAREN
		|
		(FactorDesignator) Designator
		;

Designator ::= (DesignatorIdentBraces) IDENT:desigName LSBRACE Expr RSBRACE
		|
		(DesignatorNamespaceBraces) IDENT:namespaceName TWO_DOUBLE_DOT IDENT:desigName LSBRACE Expr RSBRACE
		|
		(DesignatorNamespace) IDENT:namespaceName TWO_DOUBLE_DOT IDENT:desigName
		|
		(DesignatorIdent) IDENT:desigName
		;	

// -------------------- OPERATORS --------------------

AssignOp ::= (Equal) EQUAL;

AddOp ::= (Plus) PLUS
		|
		(Minus) MINUS
		;
		
MulOp ::= (Mul) MUL
		|
		(Div) DIV
		|
		(Mod) MOD
		;